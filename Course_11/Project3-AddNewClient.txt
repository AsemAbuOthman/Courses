#include <iostream>
#include "clsBankClient.h"
#include "clsInputValidate.h"

using namespace std;

void ReadClientInfo(clsBankClient& Client) 
{
    cout << "First Name : ";
    Client.FirstName = clsInputValidate::ReadString();

    cout << "Last Name : ";
    Client.LastName = clsInputValidate::ReadString();

    cout << "Email : ";
    Client.Email = clsInputValidate::ReadString();

    cout << "Phone : ";
    Client.Phone = clsInputValidate::ReadString();

    cout << "Pin Code : ";
    Client.PinCode = clsInputValidate::ReadString();

    cout << "AccountBallance: ";
    Client.AccountBalance = clsInputValidate::ReadDblNumber("Plz enter a float number : ");

}

//void UpdateClient() 
//{
//    string AccountNumber = "";
//
//    cout << "Plz enter an Account Number: ";
//    AccountNumber = clsInputValidate::ReadString();
//
//    while (!clsBankClient::IsClientExist(AccountNumber)) 
//    {
//        cout << "Account Number is not found, choose another one : ";
//        AccountNumber = clsInputValidate::ReadString();
//
//    }
//
//    clsBankClient Client1 = clsBankClient::Find(AccountNumber);
//    Client1.Print();
//
//    cout << "\n\nUpdate Client Info : ";
//    cout << "\n-----------------------\n";
//
//    ReadClientInfo(Client1);
//}

void AddNewClient() 
{
    string AccountNumber = "";

    cout << "\n Plz enter Account Number : ";
    AccountNumber = clsInputValidate::ReadString();

    while (clsBankClient::IsClientExist(AccountNumber)) 
    {
        cout << "\nAccount Number is already in used, Choose another one : ";
        AccountNumber = clsInputValidate::ReadString();

    }

    clsBankClient NewClient = clsBankClient::GetAddNewClientObject(AccountNumber);

    ReadClientInfo(NewClient);

    clsBankClient::enSaveResults SaveResult;

    SaveResult = NewClient.Save();

    switch (SaveResult) 
    {
    case clsBankClient::enSaveResults::svSucceded:
        cout << "Account Added Successfully :-)" << endl;
        NewClient.Print();
        break;
    
    case clsBankClient::enSaveResults::svFaildEmptyObject:

        cout << "Error Account was not saved because it's Empty " << endl;
        break;
    
    case clsBankClient::enSaveResults::svFaildAccountNumberExist:

        cout << "Error Account is Already in used, try another one " << endl;
        break;
    
    }

}

int main()
{

    AddNewClient();
    

    return 0;
}