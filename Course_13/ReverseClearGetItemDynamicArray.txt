#pragma once

#include <iostream>

using namespace std;

template <typename t> class clsDynamicArray
{

private:
	int _Size = 0;
	t* tempArray = NULL;

public:
	t* Array = NULL;

	clsDynamicArray(int size) 
	{
		if (size < 0)
			size = 0;

		_Size = size;
		Array = new t[_Size];
	}

	~clsDynamicArray()
	{
		delete[] Array;
	}

	bool SetItem(int index, t item) 
	{
		if (index >= _Size || _Size < 0) {

			return false;
		}

		Array[index] = item;

		return true;
	}

	bool IsEmpty()
	{
		return _Size == 0 ? true : false;
	}

	int Size() 
	{
		return _Size;
	}

	void Resize(int newSize) 
	{
		if (newSize < 0) 
		{
			_Size = 0;
		}

		tempArray = new t[newSize];

		if (newSize < _Size)
		{
			_Size = newSize;
		}

		for (int i = 0; i < _Size; i++) {

			tempArray[i] = Array[i];
		}

		_Size = newSize;

		delete[] Array;
		Array = tempArray;
	}

	t GetItem(int index) 
	{
		return Array[index];
	}

	void Reverse() 
	{
		t temp;

		for (int i = 0; i < _Size / 2; i++) 
		{
			temp = Array[_Size - i - 1];
			Array[_Size - i - 1] = Array[i];
			Array[i] = temp;
		}
	}

	void Clear() 
	{
		delete[] Array;
		Array = tempArray;
		_Size = 0;
	}

	void PrintList() 
	{

		for (int i = 0; i < _Size; i++) 
		{
			cout << Array[i] << " ";
		}

		cout << endl;
	}
};

