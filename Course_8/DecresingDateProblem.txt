#include <iostream>
#include <string>
#include<cmath>
#include<iomanip>
#include<ctime>

using namespace std;

struct stDate
{
	int Day = 0;
	int Month = 0;
	int Year = 0;

};

int ReadNumber(string message)
{
	int number = 0;

	cout << message;
	cin >> number;

	cout << endl;

	return number;
}

stDate ReadFullDate()
{
	stDate Date;

	Date.Day = ReadNumber("Plz enter a day ? ");
	Date.Month = ReadNumber("Plz enter a month ? ");
	Date.Year = ReadNumber("Plz enter a year ? ");

	cout << endl;

	return Date;
}

bool IsLeapYear(int year)
{
	return year % 400 == 0 ? true : year % 100 != 0 && year % 4 == 0 ? true : false;
}

int NumberOfDaysInMonth(int year, int month)
{
	if (month < 1 || month > 12)
		return 0;

	int arr12Days[] = { 31,30,31,30,31,30,31,31,30,31,30,31 };

	return month == 2 ? (IsLeapYear(year) ? 29 : 28) : arr12Days[month - 1];
}

int NumberOfDaysFromBeginningOfYear(short year, short month, short day)
{
	int sum = 0;

	for (int i = 1; i < month; i++)
	{
		sum += NumberOfDaysInMonth(year, i);
	}

	return sum + day;
}

int IsDate1BeforeDate2(stDate Date1, stDate Date2)
{

	return Date1.Year < Date2.Year ? true : Date1.Year == Date2.Year ? Date1.Month < Date2.Month ? true : Date1.Month == Date2.Month ? Date1.Day < Date2.Day ? true : false : false : false;
}

int DaysDiff(stDate Date1, stDate Date2, bool IncludeEndDay = false)//2000-2022
{

	int sumOfDays = 0;

	if (IsDate1BeforeDate2(Date1, Date2))
	{
		for (int i = Date1.Year; i < Date2.Year; i++)
		{
			sumOfDays += NumberOfDaysFromBeginningOfYear(i, 12, 31);
		}

		sumOfDays += NumberOfDaysFromBeginningOfYear(Date2.Year, Date2.Month, Date2.Day) - NumberOfDaysFromBeginningOfYear(Date1.Year, Date1.Month, Date1.Day);
	}
	else
	{
		for (int i = Date2.Year; i < Date1.Year; i++)
		{
			sumOfDays += NumberOfDaysFromBeginningOfYear(i, 12, 31);
		}

		sumOfDays += NumberOfDaysFromBeginningOfYear(Date1.Year, Date1.Month, Date1.Day) - NumberOfDaysFromBeginningOfYear(Date2.Year, Date2.Month, Date2.Day);

		sumOfDays *= -1;
	}

	return sumOfDays;
}

bool IsDayLastDayInMonth(stDate Date)
{
	return Date.Day == NumberOfDaysInMonth(Date.Year, Date.Month) ? true : false;
}

bool IsMonthLastMonthInYear(stDate Date)
{
	return Date.Month == 12 ? true : false;
}

stDate DecreaseDateByOneDay(stDate Date)
{

		if (Date.Day == 1) 
		{
			if (Date.Month == 1) 
			{
				Date.Day = NumberOfDaysInMonth(Date.Year - 1, 12);
				Date.Month = 12;
				Date.Year -= 1;
			}
			else 
			{
				Date.Day = NumberOfDaysInMonth(Date.Year, Date.Month - 1);
				Date.Month -= 1;
			}

			
		}
		else 
		{
			Date.Day--;
		}


	return Date;
}

stDate DecreaseDateByXDays(stDate Date, int howManyDays)
{
	for (short i = 1; i <= howManyDays; i++)
	{
		Date = DecreaseDateByOneDay(Date);

	}

	return Date;
}

stDate DecreaseDateByOneWeek(stDate Date)
{

	Date = DecreaseDateByXDays(Date, 7);

	return Date;
}

stDate DecreaseDateByXWeeks(stDate Date, int howManyWeeks)
{
	for (int i = 1; i <= howManyWeeks; i++)
	{
		Date = DecreaseDateByXDays(Date, 7);
	}

	return Date;
}

stDate DecreaseDateByOneMonth(stDate Date)
{
	Date = DecreaseDateByXDays(Date, NumberOfDaysInMonth(Date.Year, Date.Month));

	return Date;
}

stDate DecreaseDateByXMonths(stDate Date, int howManyMonths)
{
	for (int i = 1; i <= howManyMonths; i++)
	{
		Date = DecreaseDateByOneMonth(Date);
	}

	return Date;
}

stDate DecreaseDateByOneYear(stDate Date)
{
	Date = DecreaseDateByXMonths(Date, 12);

	return Date;
}

stDate DecreaseDateByXYears(stDate Date, int howManyYears)
{
	for (int i = 1; i <= howManyYears; i++)
	{
		Date = DecreaseDateByOneYear(Date);
	}

	return Date;
}

stDate DecreaseDateByXYearsFaster(stDate Date, int howManyYears)
{
	Date.Year -= howManyYears;

	return Date;
}

stDate DecreaseDateByOneDecade(stDate Date)
{
	Date = DecreaseDateByXYears(Date, 10);

	return Date;
}

stDate DecreaseDateByXDecades(stDate Date, int howManyDecades)
{
	for (int i = 1; i <= howManyDecades; i++)
	{
		Date = DecreaseDateByOneDecade(Date);
	}

	return Date;
}

stDate DecreaseDateByXDecadesFaster(stDate Date, int howManysDecades)
{
	Date.Year -= howManysDecades * 10;

	return Date;
}

stDate DecreaseDateByOneCentury(stDate Date)
{
	Date = DecreaseDateByXDecades(Date, 10);

	return Date;
}

stDate DecreaseDateByOneMillennium(stDate Date)
{
	for (int i = 1; i <= 10; i++)
	{
		Date = DecreaseDateByOneCentury(Date);

	}

	return Date;
}

void PrintMessage(string message, stDate Date)
{
	cout << message << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

}

int main()
{

	stDate Date = ReadFullDate();

	Date = DecreaseDateByOneDay(Date);
	PrintMessage("01 - Subtracting one Day is : ", Date);

	Date = DecreaseDateByXDays(Date, 10);
	PrintMessage("02 - Subtracting 10 Days is : ", Date);

	Date = DecreaseDateByOneWeek(Date);
	PrintMessage("03 - Subtracting one Week is : ", Date);

	Date = DecreaseDateByXWeeks(Date, 10);
	PrintMessage("04 - Subtracting 10 Weeks is : ", Date);

	Date = DecreaseDateByOneMonth(Date);
	PrintMessage("05 - Subtracting one Month is : ", Date);

	Date = DecreaseDateByXMonths(Date, 5);
	PrintMessage("06 - Subtracting 5 Months is : ", Date);

	Date = DecreaseDateByOneYear(Date);
	PrintMessage("07 - Subtracting one year is : ", Date);

	Date = DecreaseDateByXYears(Date, 10);
	PrintMessage("08 - Subtracting 10 years is : ", Date);

	Date = DecreaseDateByXYearsFaster(Date, 10);
	PrintMessage("09 - Subtracting 10 years (Faster) is : ", Date);

	Date = DecreaseDateByOneDecade(Date);
	PrintMessage("10 - Subtracting one Decade is : ", Date);

	Date = DecreaseDateByXDecades(Date, 10);
	PrintMessage("11 - Subtracting 10 Decade is : ", Date);

	Date = DecreaseDateByXDecadesFaster(Date, 10);
	PrintMessage("12 - Subtracting 10 Decade (Faster) is : ", Date);

	Date = DecreaseDateByOneCentury(Date);
	PrintMessage("13 - Subtracting one Century is : ", Date);

	Date = DecreaseDateByOneMillennium(Date);
	PrintMessage("14 - Subtracting One Millennium is : ", Date);


	return 0;
}